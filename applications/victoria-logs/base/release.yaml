apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: victoria-logs-release
  namespace: openshift-gitops
spec:
  project: applications
  destination:
    server: "https://kubernetes.default.svc"
    namespace: sigaint-monitoring
  source:
    chart: victoria-logs-single
    repoURL: https://victoriametrics.github.io/helm-charts/
    targetRevision: 0.8.11
    helm:
      releaseName: victoria-logs-single
      valuesObject:
        server:
          enabled: true
          image:
            # -- Image registry
            registry: ""
            # -- Image repository
            repository: victoriametrics/victoria-logs
            # -- Image tag
            tag: ""
            # -- Image tag suffix, which is appended to `Chart.AppVersion` if no `server.image.tag` is defined
            variant: victorialogs
            # -- Image pull policy
            pullPolicy: IfNotPresent
          # -- Image pull secrets
          imagePullSecrets: []
          # -- Replica count
          replicaCount: 1
          # -- Name of Priority Class
          priorityClassName: ""
          # -- Data retention period. Possible units character: h(ours), d(ays), w(eeks), y(ears), if no unit character specified - month. The minimum retention period is 24h. See these [docs](https://docs.victoriametrics.com/victorialogs/#retention)
          retentionPeriod: 1
          # -- Data retention max capacity. Default unit is GiB. See these [docs](https://docs.victoriametrics.com/victorialogs/#retention-by-disk-space-usage)
          retentionDiskSpaceUsage: ""
          # -- Extra command line arguments for container of component
          extraArgs:
            envflag.enable: true
            envflag.prefix: VM_
            loggerFormat: json
            httpListenAddr: :9428
            syslog.listenAddr.tcp: ":2514"
            syslog.listenAddr.udp: ":2514"

          # -- Additional hostPath mounts
          extraHostPathMounts:
            []
             #- name: certs-dir
             #  mountPath: /etc/kubernetes/certs
             #  subPath: ""
             #  hostPath: /etc/kubernetes/certs
             #  readOnly: true

          # -- Extra Volumes for the pod
          extraVolumes:
            []
            #- name: example
            #  configMap:
            #   name: example

          # -- Extra Volume Mounts for the container
          extraVolumeMounts:
            []
            # - name: example
            #   mountPath: /example

          # -- Extra containers to run in a pod with Victoria Logs container
          extraContainers:
            []
            #- name: config-reloader
            #  image: reloader-image

          # -- Init containers for Victoria Logs Pod
          initContainers:
            []

          # -- Node tolerations for server scheduling to nodes with taints. Details are [here](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/)
          tolerations:
            []
            # - key: "key"
            #   operator: "Equal|Exists"
            #   value: "value"
            #   effect: "NoSchedule|PreferNoSchedule"

          # -- Pod's node selector. Details are [here](https://kubernetes.io/docs/user-guide/node-selection/)
          nodeSelector: {}

          # -- Pod topologySpreadConstraints
          topologySpreadConstraints: []

          # -- Pod affinity
          affinity: {}

          # -- Additional environment variables (ex.: secret tokens, flags). Details are [here](https://github.com/VictoriaMetrics/VictoriaMetrics#environment-variables)
          env: []

          # -- Specify alternative source for env variables
          envFrom:
            []
            #- configMapRef:
            #    name: special-config

          # -- Container workdir
          containerWorkingDir: ""

          # -- Use an alternate scheduler, e.g. "stork". Check details [here](https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/)
          #
          # schedulerName:

          emptyDir: {}
          persistentVolume:
            # -- Create/use Persistent Volume Claim for server component. Empty dir if false
            enabled: true

            # -- Override Persistent Volume Claim name
            name: ""

            # -- Array of access modes. Must match those of existing PV or dynamic provisioner. Details are [here](http://kubernetes.io/docs/user-guide/persistent-volumes/)
            accessModes:
              - ReadWriteOnce
            # -- Persistant volume annotations
            annotations: {}

            # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
            storageClassName: ""

            # -- Existing Claim name. If defined, PVC must be created manually before volume will be bound
            existingClaim: ""

            # -- Bind Persistent Volume by labels. Must match all labels of targeted PV.
            matchLabels: {}

            # -- Mount path. Server data Persistent Volume mount root path.
            mountPath: /storage
            # -- Mount subpath
            subPath: ""
            # -- Size of the volume. Should be calculated based on the logs you send and retention policy you set.
            size: 200Gi

          # -- StatefulSet/Deployment additional labels
          extraLabels: {}
          # -- Pod's additional labels
          podLabels: {}
          # -- Pod's annotations
          podAnnotations: {}
          # -- Pod's management policy
          podManagementPolicy: OrderedReady

          # -- Resource object. Details are [here](http://kubernetes.io/docs/user-guide/compute-resources/)
          resources:
            {}
            # limits:
            #   cpu: 500m
            #   memory: 512Mi
            # requests:
            #   cpu: 500m
            #   memory: 512Mi

          probe:
            # -- Indicates whether the Container is ready to service requests. If the readiness probe fails, the endpoints controller removes the Pod's IP address from the endpoints of all Services that match the Pod. The default state of readiness before the initial delay is Failure. If a Container does not provide a readiness probe, the default state is Success.
            readiness:
              httpGet: {}
              initialDelaySeconds: 5
              periodSeconds: 15
              timeoutSeconds: 5
              failureThreshold: 3

            # -- Indicates whether the Container is running. If the liveness probe fails, the kubelet kills the Container, and the Container is subjected to its restart policy. If a Container does not provide a liveness probe, the default state is Success.
            liveness:
              tcpSocket: {}
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 5
              failureThreshold: 10

            # -- Indicates whether the Container is done with potentially costly initialization. If set it is executed first. If it fails Container is restarted. If it succeeds liveness and readiness probes takes over.
            startup: {}
             # tcpSocket: {}
             # failureThreshold: 30
             # periodSeconds: 15
             # successThreshold: 1
             # timeoutSeconds: 5

          # -- Security context to be added to server pods
          securityContext:
            enabled: false

          # -- Pod's security context. Details are [here](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
          podSecurityContext:
            enabled: false

          ingress:
            # -- Enable deployment of ingress for server component
            enabled: true

            # -- Ingress annotations
            annotations:
               kubernetes.io/ingress.class: openshift-default
               #kubernetes.io/tls-acme: 'true'

            # -- Ingress extra labels
            extraLabels: {}

            # -- Array of host objects
            hosts:
              - name: victoria.ocp.sigaint.au
                path:
                  - /
                port: http

              - name: victoria.logs.sigaint.au
                path:
                  - /
                port: http

            # -- Array of TLS objects
            tls:
              - secretName: victoria-logs-tls
                hosts:
                  - victoria.ocp.sigaint.au
                  - victoria.logs.sigaint.au

            # -- Ingress controller class name
            ingressClassName: ""

            # -- Ingress path type
            pathType: Prefix

          service:
            # -- Service annotations
            annotations: {}
            # -- Service labels
            labels: {}
            # -- Service ClusterIP
            clusterIP: ""
            # -- Service external IPs. Details are [here]( https://kubernetes.io/docs/user-guide/services/#external-ips)
            externalIPs: []
            # -- Service load balancer IP
            loadBalancerIP: ""
            # -- Load balancer source range
            loadBalancerSourceRanges: []
            # -- Target port
            targetPort: http
            # -- Service port
            servicePort: 9428
            # -- Node port
            # nodePort: 30000
            # -- Service type
            type: ClusterIP
            # -- Service external traffic policy. Check [here](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip) for details
            externalTrafficPolicy: ""
            # -- Health check node port for a service. Check [here](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip) for details
            healthCheckNodePort: ""
            # -- Service IP family policy. Check [here](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services) for details.
            ipFamilyPolicy: ""
            # -- List of service IP families. Check [here](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services) for details.
            ipFamilies: []

          statefulSet:
            # -- Creates statefulset instead of deployment, useful when you want to keep the cache
            enabled: true
            # -- Deploy order policy for StatefulSet pods
            podManagementPolicy: OrderedReady
          # -- Pod's termination grace period in seconds
          terminationGracePeriodSeconds: 60
          serviceMonitor:
            # -- Enable deployment of Service Monitor for server component. This is Prometheus operator object
            enabled: false
            # -- Service Monitor labels
            extraLabels: {}
            # -- Service Monitor annotations
            annotations: {}
            # -- Basic auth params for Service Monitor
            basicAuth: {}
            # -- Commented. Prometheus scrape interval for server component
        #    interval: 15s
            # -- Commented. Prometheus pre-scrape timeout for server component
        #    scrapeTimeout: 5s
            # -- Commented. HTTP scheme to use for scraping.
        #    scheme: https
            # -- Commented. TLS configuration to use when scraping the endpoint
        #    tlsConfig:
        #      insecureSkipVerify: true
            # -- Service Monitor relabelings
            relabelings: []
            # -- Service Monitor metricRelabelings
            metricRelabelings: []
            # -- Service Monitor target port
            targetPort: http
